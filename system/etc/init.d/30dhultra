#!/system/bin/sh

READ_AHEAD_KB=$(cat /system/etc/dh/74sched)
SCHED_SEQ=$(cat /system/etc/dh/75sd)

#Set rac based on DC Script output
echo "Setting read ahead to $READ_AHEAD_KB"
echo $READ_AHEAD_KB > /sys/block/mmcblk0/queue/read_ahead_kb
echo $READ_AHEAD_KB > /sys/block/mmcblk0/queue/read_ahead_kb

#Enable Scheduler as per our DC Script
echo "Enabling $SCHED scheduler for I/O system!"
echo "$SCHED" > /sys/block/mmcblk0/queue/scheduler
echo "$SCHED" > /sys/block/mmcblk0/queue/scheduler
}

# microSD Card
echo "4096" > /sys/devices/virtual/bdi/179:0/read_ahead_kb;

#OPTIMIZE MOUNTS
echo "Optimizing mounts for /system, /data and /cache"
mount -o remount,data=writeback,delalloc,noatime,noauto_da_alloc,nodiratime,barrier=1,nobh /system
mount -o remount,delalloc,noatime,noauto_da_alloc,nodiratime,nobh /data
mount -o remount,delalloc,noatime,noauto_da_alloc,nodiratime,nobh /cache

#Auto Update HOSTS file to block ads if enabled
if [ `cat /system/etc/dh/76hostud` != 'on' ]; then
	blockads
fi
#CLEAN CACHE
echo "Cleaning cache directories"
rm -r /cache/*.apk 2>/dev/null
rm -r /cache/*.tmp 2>/dev/null
rm -r /data/dalvik-cache/*.apk 2>/dev/null
rm -r /data/dalvik-cache/*.tmp 2>/dev/null
rm -f /cache/recovery/* 2>/dev/null

#SET AUTOKILL
echo "Adjusting autokill settings"
echo "0,1,2,4,7,15" > /sys/module/lowmemorykiller/parameters/adj
echo "2048,3072,4096,6144,7168,8192" > /sys/module/lowmemorykiller/parameters/minfree

#FAST CHARGING 
FAST CHARGE=$(cat /system/etc/dh/72fast)
if [ -e /sys/kernel/fast_charge/force_fast_charge ] ; then
	if [ $FAST_CHARGE = "Fastcharge On" ]; then
		echo "1" > /sys/kernel/fast_charge/force_fast_charge
	else
		echo "0" > /sys/kernel/fast_charge/force_fast_charge
	fi	
fi

#sysctl start
sysctl -p



#Zip align APKs
echo "Zip Aligning APKs"
LOG_FILE=/data/zipalign.log
    if [ -e $LOG_FILE ]; then
        rm $LOG_FILE;
    fi;
 
echo "Starting DC Automatic ZipAlign $( date +"%m-%d-%Y %H:%M:%S" )" | tee -a $LOG_FILE;
    for apk in /system/app/*.apk ; do
        zipalign -c 4 $apk;
        ZIPCHECK=$?;
        if [ $ZIPCHECK -eq 1 ]; then
                echo ZipAligning $(basename $apk)  | tee -a $LOG_FILE;
                zipalign -f 4 $apk /cache/$(basename $apk);
                        if [ -e /cache/$(basename $apk) ]; then
                                cp -f -p /cache/$(basename $apk) $apk  | tee -a $LOG_FILE;
                                rm /cache/$(basename $apk);
                        else
                                echo ZipAligning $(basename $apk) Failed DC | tee -a $LOG_FILE;
                        fi;
        else
                echo DCZipAlign already completed on $apk  | tee -a $LOG_FILE;
        fi;
       done;
    for apk in /data/app/*.apk ; do
        zipalign -c 4 $apk;
        ZIPCHECK=$?;
        if [ $ZIPCHECK -eq 1 ]; then
                echo ZipAligning $(basename $apk)  | tee -a $LOG_FILE;
                zipalign -f 4 $apk /cache/$(basename $apk);
                        if [ -e /cache/$(basename $apk) ]; then
                                cp -f -p /cache/$(basename $apk) $apk  | tee -a $LOG_FILE;
                                rm /cache/$(basename $apk);
                        else
                                echo ZipAligning $(basename $apk) Failed DC | tee -a $LOG_FILE;
                        fi;
        else
                echo DCZipAlign already completed on $apk  | tee -a $LOG_FILE;
        fi;
       done;
echo "Automatic ZipAlign finished at $( date +"%m-%d-%Y %H:%M:%S" )" | tee -a $LOG_FILE;

#COMPRESS DB
echo "Compressing SQLite databases"
for db in `find /data -iname "*.db"`; do
	echo "Compressing $db"
	sqlite3 $db 'VACUUM;'
done

echo ""

#Disable Google Checking
echo "Disable Google checking"
if [ -e /data/data/com.google.android.gsf/databases/gservices.db ]; then
	sqlite3 /data/data/com.google.android.gsf/databases/gservices.db "update main set value = 'false' where name = 'perform_market_checkin' and value = 'true'";
	sqlite3 /data/data/com.google.android.gsf/databases/gservices.db "update main set value = 'false' where name = 'checkin_dropbox_upload:system_update' and value = 'true'"
	sqlite3 /data/data/com.google.android.gsf/databases/gservices.db "update main set value = 0 where name = 'market_force_checkin' and value = -1"
	sqlite3 /data/data/com.google.android.gsf/databases/gservices.db "update main set value = 0 where name = 'checkin_interval'"
	sqlite3 /data/data/com.google.android.gsf/databases/gservices.db "update main set value = 0 where name = 'secure:bandwidth_checkin_stat_interval'"
fi;

echo ""

setprop cm.filesystem.ready 1
setprop dc.filesystem.ready 1
setprop oxygen.filesystem.ready 1

#sysctl start
sysctl -p

sync

