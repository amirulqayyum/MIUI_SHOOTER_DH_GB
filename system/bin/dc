#!/system/bin/sh
mount -o remount,rw -t ext4 /dev/block/mmcblk0p23 /system
mount -o remount,rw -t ext4 /data;

devicecheck=$(grep ro.product.device= /system/build.prop | busybox cut -d \= -f 2 | busybox tr -cd '[:alnum:]')
romcheck=$(grep ro.product.version= /system/build.prop | busybox cut -d \= -f 2 | busybox cut -d " " -f 1)
kernelcheck=$(busybox uname -r)

#-------------	virtuous_oc start  -----------------------------

availfreq ()
{
	if [ -e sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state ]; then
		cat /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state | awk '{print $1,""}' | tr -d '\n' | fold -sw 60
		echo
	else
		echo "192000, 384000, 432000, 486000, 540000, 596000"
		echo "648000, 702000, 756000, 810000, 864000, 918000"
		echo "972000, 1026000, 1080000, 1134000, 1188000"
	fi
}

setrak ()
{
	READ_AHEAD_KB=$(cat /system/etc/dh/75sd)
	echo "Setting read ahead to $READ_AHEAD_KB"
	echo $READ_AHEAD_KB > /sys/block/mmcblk0/queue/read_ahead_kb
	echo $READ_AHEAD_KB > /sys/block/mmcblk1/queue/read_ahead_kb
	echo "Enter to continue..."
	read key
	break
}
setsched ()
{
SCHED=$(cat /system/etc/dh/74sched)
					echo "Enabling $SCHED scheduler for I/O system!"
					echo "$SCHED" > /sys/block/mmcblk0/queue/scheduler
					echo "$SCHED" > /sys/block/mmcblk1/queue/scheduler
					echo "Enter to continue..."					
					read key
					break
	
}

setvoltage ()
{
VOLTAGE=$(cat /system/etc/dh/73voltage)

if [ $VOLTAGE = "UNDER" ]; then
	v192="192000 800000"
	v310="310500 812500"
	v384="384000 825000"
	v432="432000 837500"
	v486="486000 850000"
	v540="540000 875000"
	v594="594000 875000"
	v648="648000 887500"
	v702="702000 912500"
	v756="756000 925000"
	v810="810000 937500"
	v864="864000 950000"
	v918="918000 962500"
	v972="972000 987500"
	v1026="1026000 1000000"
	v1080="1080000 1025000"
	v1134="1134000 1037500"
	v1188="1188000 1062500"
	v1242="1242000 1087500"
	v1296="1296000 1100000"
	v1350="1350000 1125000"
	v1404="1404000 1137500"
	v1458="1458000 1162500"
	v1512="1512000 1200000"
	v1536="1536000 1225000"
	v1566="1566000 1250000"
	v1620="1620000 1275000"
	v1674="1674000 1312500"
	v1728="1728000 1337500"
	v1782="1782000 1375000"
	v1836="1836000 1400000"
	v1944="1944000 1475000"
fi	

if [ $VOLTAGE = "MINIMUM" ]; then
	v192="192000 800000"
	v310="310500 800000"
	v384="384000 800000"
	v432="432000 800000"
	v486="486000 800000"
	v540="540000 825000"
	v594="594000 825000"
	v648="648000 837500"
	v702="702000 862500"
	v756="756000 875000"
	v810="810000 887500"
	v864="864000 900000"
	v918="918000 912500"
	v972="972000 937500"
	v1026="1026000 950000"
	v1080="1080000 975000"
	v1134="1134000 987500"
	v1188="1188000 1012500"
	v1242="1242000 1037500"
	v1296="1296000 1050000"
	v1350="1350000 1075000"
	v1404="1404000 1087500"
	v1458="1458000 1112500"
	v1512="1512000 1150000"
	v1536="1536000 1175000"
	v1566="1566000 1200000"
	v1620="1620000 1225000"
	v1674="1674000 1262500"
	v1728="1728000 1287500"
	v1782="1782000 1325000"
	v1836="1836000 1350000"
	v1944="1944000 1425000"
fi

if [ $VOLTAGE = "NORMAL" ]; then
	v192="192000 850000"
	v310="310500 850000"
	v384="384000 850000"
	v432="432000 850000"
	v486="486000 850000"
	v540="540000 850000"
	v594="594000 862500"
	v648="648000 875000"
	v702="702000 900000"
	v756="756000 925000"
	v810="810000 937500"
	v864="864000 962500"
	v918="918000 962500"
	v972="972000 962500"
	v1026="1026000 975000"
	v1080="1080000 987500"
	v1134="1134000 1000000"
	v1188="1188000 1012500"
	v1242="1242000 1100000"
	v1296="1296000 1125000"
	v1350="1350000 1150000"
	v1404="1404000 1175000"
	v1458="1458000 1187500"
	v1512="1512000 1200000"
	v1536="1536000 1225000"
	v1566="1566000 1275000"
	v1620="1620000 1275000"
	v1674="1674000 1375000"
	v1728="1728000 1375000"
	v1782="1782000 1400000"
	v1836="1836000 1450000"
	v1944="1944000 1450000"
fi	
	
echo $v192 > /sys/devices/system/cpu/cpu0/cpufreq/vdd_levels
echo $v310 > /sys/devices/system/cpu/cpu0/cpufreq/vdd_levels
echo $v384 > /sys/devices/system/cpu/cpu0/cpufreq/vdd_levels
echo $v432 > /sys/devices/system/cpu/cpu0/cpufreq/vdd_levels
echo $v486 > /sys/devices/system/cpu/cpu0/cpufreq/vdd_levels
echo $v540 > /sys/devices/system/cpu/cpu0/cpufreq/vdd_levels
echo $v594 > /sys/devices/system/cpu/cpu0/cpufreq/vdd_levels
echo $v648 > /sys/devices/system/cpu/cpu0/cpufreq/vdd_levels
echo $v702 > /sys/devices/system/cpu/cpu0/cpufreq/vdd_levels
echo $v756 > /sys/devices/system/cpu/cpu0/cpufreq/vdd_levels
echo $v810 > /sys/devices/system/cpu/cpu0/cpufreq/vdd_levels
echo $v864 > /sys/devices/system/cpu/cpu0/cpufreq/vdd_levels
echo $v918 > /sys/devices/system/cpu/cpu0/cpufreq/vdd_levels
echo $v972 > /sys/devices/system/cpu/cpu0/cpufreq/vdd_levels
echo $v1026 > /sys/devices/system/cpu/cpu0/cpufreq/vdd_levels
echo $v1080 > /sys/devices/system/cpu/cpu0/cpufreq/vdd_levels
echo $v1134 > /sys/devices/system/cpu/cpu0/cpufreq/vdd_levels
echo $v1188 > /sys/devices/system/cpu/cpu0/cpufreq/vdd_levels
echo $v1242 > /sys/devices/system/cpu/cpu0/cpufreq/vdd_levels
echo $v1296 > /sys/devices/system/cpu/cpu0/cpufreq/vdd_levels
echo $v1350 > /sys/devices/system/cpu/cpu0/cpufreq/vdd_levels
echo $v1404 > /sys/devices/system/cpu/cpu0/cpufreq/vdd_levels
echo $v1458 > /sys/devices/system/cpu/cpu0/cpufreq/vdd_levels
echo $v1512 > /sys/devices/system/cpu/cpu0/cpufreq/vdd_levels
echo $v1536 > /sys/devices/system/cpu/cpu0/cpufreq/vdd_levels
echo $v1566 > /sys/devices/system/cpu/cpu0/cpufreq/vdd_levels
echo $v1620 > /sys/devices/system/cpu/cpu0/cpufreq/vdd_levels
echo $v1674 > /sys/devices/system/cpu/cpu0/cpufreq/vdd_levels
echo $v1728 > /sys/devices/system/cpu/cpu0/cpufreq/vdd_levels
echo $v1782 > /sys/devices/system/cpu/cpu0/cpufreq/vdd_levels
echo $v1836 > /sys/devices/system/cpu/cpu0/cpufreq/vdd_levels
echo $v1944 > /sys/devices/system/cpu/cpu0/cpufreq/vdd_levels
echo -n "Undervolt set to "
cat /system/etc/dh/73voltage
echo "Press Enter to continue."
read key
					
}

occonfig ()
{
	while echo
	do
	echo "================================================="
	echo "                  Daemon Config                  "
	echo "================================================="
	echo
	echo "1) Set MIN Awake Freq"
	echo "2) Set MAX Awake Freq"
	echo "3) Set MIN Sleep Freq"
	echo "4) Set MAX Sleep Freq"
	echo	

	echo "5) Set Awake Governor"
	echo "6) Set Sleep Governor"
	echo
	echo "7) Start virtuous_oc"
	echo "8) Performance toggle"

	echo "9) Change scheduler"
	echo "10) Change I/O rah_KB"
	echo
	echo -n "Please choose an option (Enter to exit): "
	read option
	case $option in
		
		1)	echo "Current Awake MIN Freq"
			echo "======================"
			echo $awakemin
			echo "======================"
			echo
			echo "Available Frequencies"
			echo "=============================================="
			availfreq
			echo "=============================================="
			echo
			echo -n "Please enter a MIN Awake freq (Enter to exit): "
			read frequency
			if echo $frequency | egrep -q '[0-9]'; then
				echo $frequency > /system/etc/virtuous_oc/wake_min_freq
				echo
				echo "Done!"
				echo
				echo "Enter to continue..."
				read key
			else
				echo "Nothing changed!"
				echo
				echo "Enter to continue..."
				read key
			fi
			;;
		2)	echo "Current Awake MAX Freq"
			echo "======================"
			echo $awakemax
			echo "======================"
			echo
			echo "Available Frequencies"
			echo "=============================================="
			availfreq
			echo "=============================================="
			echo
			echo -n "Please enter a MAX Awake freq (Enter to exit): "
			read frequency
			if echo $frequency | egrep -q '[0-9]'; then
				echo $frequency > /system/etc/virtuous_oc/wake_max_freq
				echo
				echo "Done!"
				echo
				echo "Enter to continue..."
				read key
			else
				echo "Nothing changed!"
				echo
				echo "Enter to continue..."
				read key
			fi
			;;
		3)	echo "Current Sleep MIN Freq"
			echo "======================"
			echo $sleepmin
			echo "======================"
			echo
			echo "Available Frequencies"
			echo "=============================================="
			availfreq
			echo "=============================================="
			echo
			echo -n "Please enter a MIN Sleep freq (Enter to exit): "
			read frequency
			if echo $frequency | egrep -q '[0-9]'; then
				echo $frequency > /system/etc/virtuous_oc/sleep_min_freq
				echo
				echo "Done!"
				echo
				echo "Enter to continue..."
				read key
			else
				echo "Nothing changed!"
				echo
				echo "Enter to continue..."
				read key
			fi
			;;
		4)	echo "Current Sleep MAX Freq"
			echo "======================"
			echo $sleepmax
			echo "======================"
			echo
			echo "Available Frequencies"
			echo "=============================================="
			availfreq
			echo "=============================================="
			echo
			echo -n "Please enter a MAX Sleep freq (Enter to exit): "
			read frequency
			if echo $frequency | egrep -q '[0-9]'; then
				echo $frequency > /system/etc/virtuous_oc/sleep_max_freq
				echo
				echo "Done!"
				echo
				echo "Enter to continue..."
				read key
			else
				echo "Nothing changed!"
				echo
				echo "Enter to continue..."
				read key
			fi
			;;

		5)	while echo "Current Awake Governor"
			do
			echo "======================"
			echo $awakegov
			echo "======================"
			echo
			echo "Available Governors"
			echo "====================="
			cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors | awk ' {for(i=1;i<=NF;++i) print x++ "\t" $i } '
			echo "====================="
			echo
			echo -n "Please choose an Awake governor (Enter to exit): "
			read wakegov
			if echo $wakegov | egrep -q '[0-7]'; then
				`cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors | awk ' {for(i=1;i<=NF;++i) print x++ "\t" $i } ' | grep -w $wakegov | awk '{ print $2 }' > /system/etc/virtuous_oc/wake_governor`
				echo
				echo "Done!"
				echo
				echo "Enter to continue..."
				read key
				break
			elif echo $wakegov | egrep -q '[8-9]'; then
				echo
				echo "Not a valid selection!"
			else
				echo "Nothing changed!"
				echo
				echo "Enter to continue..."
				read key
				break
			fi
			done
			;;
		
		
		6)	while echo "Current Sleep Governor"
			do
			echo "======================"
			echo $sleepgov
			echo "======================"
			echo
			echo "Available Governors"
			echo "====================="
			cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors | awk ' {for(i=1;i<=NF;++i) print x++ "\t" $i } '
			echo "====================="
			echo
			echo -n "Please choose a Sleep governor (Enter to exit): "
			read sleepgov
			if echo $sleepgov | egrep -q '[0-7]'; then
				`cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors | awk ' {for(i=1;i<=NF;++i) print x++ "\t" $i } ' | grep -w $sleepgov | awk '{ print $2 }' > /system/etc/virtuous_oc/sleep_governor`
				echo
				echo "$sleepgov set!"
				echo
				echo "Enter to continue..."
				read key
				break
			elif echo $sleepgov | egrep -q '[8-9]'; then
				echo
				echo "Not a valid selection!"
			else
				echo "Nothing changed!"
				echo
				echo "Enter to continue..."
				read key
				break
			fi
			done
			;;

		7)	occheck=$(ps | grep -o virtuous | sed q)
			case $occheck in
				virtuous) 	echo "Daemon already running!"
							echo -n "Kill and restart? (y/n): "
							read kill
							case $kill in
								y|Y)	pkill virtuous_oc
										/system/xbin/virtuous_oc
										echo "Daemon killed and restarted!"
										echo
										echo "Enter to continue..."
										read key
										;;
								n|N)	echo "Nothing changed!"
										echo
										echo "Enter to continue..."
										read key
										;;
							esac
							;;
						*)	/system/xbin/virtuous_oc
							echo "Daemon started!"
							echo
							echo "Enter to continue..."
							read key
							;;
			esac
			;;	

		8)	if [ `cat /system/etc/virtuous_oc/wake_governor` != 'performance' ]; then
				echo `cat /system/etc/virtuous_oc/wake_governor` > /system/etc/virtuous_oc/wakegovbackup
				echo "performance" > /system/etc/virtuous_oc/wake_governor
				echo "Performance governor set!"
				echo
				echo "Enter to continue..."
				read key
			else
				wakegovbackup=$(cat /system/etc/virtuous_oc/wakegovbackup)
				echo $wakegovbackup > /system/etc/virtuous_oc/wake_governor
				echo "Toggling back to $wakegovbackup"
				echo
				echo "Enter to continue..."
				read key
			fi
			;;

		9)	while echo "Current Scheduler"
			do
			scheduler=$(cat /sys/block/mmcblk0/queue/scheduler | cut -d [ -f 2 | cut -d ] -f 1)
			echo "======================"
			echo $scheduler
			echo "======================"
			echo
			echo "Available Schedulers"
			echo "====================="
			cat /sys/block/mmcblk0/queue/scheduler
			echo "====================="
			echo
			echo -n "Please key in a scheduler (Enter to exit): "
			read scheduler
			

			case $scheduler in
				noop)
					echo noop > /system/etc/dh/74sched
					setsched
					;;
				deadline)
					echo deadline > /system/etc/dh/74sched
					setsched
					;;
				cfq)
					echo cfq > /system/etc/dh/74sched
					setsched
					;;
				bfq)
					echo bfq > /system/etc/dh/74sched
					setsched
					;;
				sio)
					echo sio > /system/etc/dh/74sched
					setsched
					;;
				vr)
					echo vr > /system/etc/dh/74sched
					setsched
					;;
				*)
					echo "Exiting..."
					break
					echo
					;;
			esac
			done
		    ;;	
		10)	echo -n "Your current read_ahead is: "
			cat /system/etc/dh/75sd
			echo "Please key in a read ahead value (in multiples of 1024): "
			read SDsetting
			echo $SDsetting > /system/etc/dh/75sd
			setrak
			;;		
		*)	break
			;;
	esac
	done
}


#----------------------  virtuous_oc end  --------------------------



#---------------------- fix_permissions start -------------------------

fixpermissions ()
{
echo
CODEPATH="";
UID="";
PACKAGE="";
IS_PROTECTED="0";

cat /data/system/packages.xml | grep "^<package" | grep userId | while read line;
do
	for i in `echo $line | tr " " "\n"`;
	do
		if [ $i = "<package" ];
		then
			CODEPATH="";
			PACKAGE="";
			UID="";
		elif ( echo $i | grep "^codePath" > /dev/null );
		then
			CODEPATH=`echo $i | cut -d \" -f 2`;
		elif ( echo $i | grep "^name" > /dev/null );
		then
			PACKAGE=`echo $i | cut -d \" -f 2`;
		elif ( echo $i | grep "^userId" > /dev/null );
		then
			UID=`echo $i | cut -d \" -f 2`;
		fi;
	
		APPDIR=`echo $CODEPATH | cut -d / -f 3`;
		if [ "$APPDIR" = "app-private" ];
		then
			IS_PROTECTED=1;
		else
			IS_PROTECTED=0;
		fi

	done;

	echo "Fixing permissions for: $PACKAGE";

	if [ $IS_PROTECTED = "1" ];
	then
		busybox chown 1000:$UID $CODEPATH;
	else
		busybox chown $UID:$UID $CODEPATH;
	fi;

	busybox chown $UID:$UID /data/data/$PACKAGE;

	for dir in databases shared_prefs;
	do
		if [ -d /data/data/$PACKAGE/$dir ];
		then
			busybox chown -R $UID:$UID /data/data/$PACKAGE/$dir;
		fi;
	done	
done;
}

#---------------------- fix_permissions end ---------------------------


#---------------------- build.prop edit -------------------------------

buildprop ()
{
	while echo
	do
	echo "================================================="
	echo "                Build.prop Editor                "
	echo "================================================="
	echo "*****************build.prop Info*****************"
	echo "Dalvik Heap: "`getprop dalvik.vm.heapsize`
	echo "WiFi Scan Interval: `getprop wifi.supplicant_scan_interval` seconds"
	#echo "LCD Density: "`getprop ro.sf.lcd_density`
	echo "================================================="
	echo
	echo "1) Adjust Dalvik Heap"
	echo "2) Adjust WiFi Scan Interval"
	#echo "3) Adjust LCD Density"
	echo
	echo -n "Please choose an option (Enter to exit): "
	read option
	case $option in
		1) 	echo "Current Dalvik Heap"
			echo "======================"
			getprop dalvik.vm.heapsize
			echo "======================"
			echo
			echo -n "Change value to: "
			read input
			setprop dalvik.vm.heapsize $input
			echo
			echo -n "Dalvik heap set to " 
			getprop dalvik.vm.heapsize
			echo
			echo "Press enter to continue..."
			read key
			;;
		2)	echo "Current WiFi Scan Interval"
			echo "======================"
			getprop wifi.supplicant_scan_interval
			echo "======================"
			echo
			echo -n "Change value to: "
			read input
			setprop wifi.supplicant_scan_interval $input
			echo
			echo -n "WiFi scan interval set to " 
			getprop wifi.supplicant_scan_interval
			echo
			echo "Press enter to continue..."
			read key
			;;
		99)	echo "UNDER DEVELOPMENT, DO NOT USE!"
			echo "Current LCD Density"
			echo "======================"
			getprop ro.sf.lcd_density
			echo "======================"
			echo
			echo -n "Change value to: "
			read input
			setprop ro.sf.lcd_density $input
			echo
			echo -n "LCD Density set to " 
			getprop ro.sf.lcd_density
			echo
			echo "Press enter to continue..."
			read key
			;;
		*)	break
			;;
	esac
	done
}
	
#---------------------- build.prop edit end -------------------------------


#---------------------- init edit start -------------------------------

initedit ()
{
	while echo
	initfile=/system/etc/init.d/30dhultra
	sysctl=/system/etc/sysctl.conf
	do
	echo "================================================="
	echo "                  Tweaks Editor                  "
	echo "================================================="
	echo "*******************Tweaks Info*******************"
	echo "sdcard Read Ahead: "`cat $initfile | grep READ_AHEAD_KB=4096 | cut -d "\"" -f 2`
	echo "VM dirty ratio: "`cat $sysctl | grep vm.dirty_ratio | cut -d = -f 2`
	echo "VM dirty background ratio: "`cat $sysctl | grep vm.dirty_background_ratio | cut -d = -f 2`
	echo "VM min free kbytes: "`cat $sysctl | grep vm.min_free_kbytes | cut -d = -f 2`
	echo "VM dirty expire centisecs: "`cat $sysctl | grep vm.dirty_expire_centisecs | cut -d = -f 2`
	echo "VM dirty writeback centisecs: "`cat $sysctl | grep vm.dirty_writeback_centisecs | cut -d = -f 2`
	echo "================================================="
	echo
	echo 
	echo "1) Adjust VM dirty ratio"
	echo "2) Adjust VM dirty background ratio"
	echo "3) Adjust VM min free kbytes"
	echo "4) Adjust VM dirty expire centisecs"
	echo "5) Adjust VM dirty writeback centisecs"
	echo
	echo -n "Please choose an option (Enter to exit): "
	read option
	case $option in
		*)	break
			;;
	esac
	done
}

	

#----------------------  mainmenu start  ------------------------------

mainmenu ()
{
	echo
	echo "1) Adjust Performance Settings"
	echo "2) Adjust UV settings"
	echo "3) Fix permissions [for FC issues]"
	echo "4) Adjust capacitive button brightness"
	echo "5) build.prop Editor (wifi interval, vm heap)"
	echo "6) Tweaks Editor (WIP)"
	echo "7) Delete/Update hosts file"
	echo "8) Enable/Disable USB Fast Charging"
	echo -n "Please choose an option (Enter to exit): "
	read option
	case $option in
		1)	occonfig
			;;
		
		2)	echo -n "Undervolt currently: "
			cat /system/etc/dh/73voltage
			echo
			echo 1. Normal/No Undervolt
			echo 2. Minimum Undervolt
			echo 3. Maximum Undervolt
			echo 4. Display current voltage table
			echo
			echo -n "Please select an undervolt option (Enter to exit): "			
			read volts
			case $volts in
				1)	echo "NORMAL" > /system/etc/dh/73voltage
					setvoltage
					;;					
				2)	echo "MINIMUM" > /system/etc/dh/73voltage
					setvoltage
					;;
				3)	echo "MAXIMUM" > /system/etc/dh/73voltage
					setvoltage
					;;	
				4)	cat /sys/devices/system/cpu/cpu0/cpufreq/vdd_levels	
					"Press Enter to continue."	
					read key					
					;;
				*)	exit
					;;
			esac		
			;;
		
		4)	echo -n "Current Brightness="
			cat /sys/devices/platform/leds-pm8058/leds/button-backlight/currents
			echo "======================"
			echo
			echo -n "Please enter a number between 2 and 20 (1 to disable, Enter to exit): "
			read leds
			if [ $leds -ge 1 ]; then
				`echo $leds > /sys/devices/platform/leds-pm8058/leds/button-backlight/currents`
				awk 'BEGIN { print "#!/system/bin/sh\n#created by -viperboy-\n"; }' > /system/etc/init.d/91leds
				echo "echo $leds > /sys/devices/platform/leds-pm8058/leds/button-backlight/currents" >> /system/etc/init.d/91leds
				chmod 777 /system/etc/init.d/91leds
				echo
				echo "Capacitive brightness set to $leds!"
				echo
				echo "init.d file created! Press Enter to continue."
			else
				echo
				echo "Exiting..."
			fi
			read key
			;;
				
		5)	buildprop
			;;	
		6)	initedit
			;;
		7)	echo "================================================="
			echo "                  Hosts Manager                  "
			echo "================================================="
			echo
			echo "1) Delete"
			echo "2) Download New HOSTS Fiile"
			echo "3) View Current HOSTS Contents"
			echo -n "4) Toggle Hosts Updating.  Currently "
			cat /system/etc/dh/76hostud
			echo
			echo -n "Please choose an option: "
			read option
			case $option in
				1)	rm /system/etc/hosts
					echo
					echo "HOSTS File Deleted!"
					echo
					echo "Press Enter to continue..."
					read key
					;;
				2)	blockads
					echo
					echo "New HOSTS File Downloaded!"
					echo
					echo "Press Enter to continue..."
					read key
					;;
				3)	cat /system/etc/hosts
					echo "Press Enter to continue..."
					read key
					;;
				4)	if [ `cat /system/etc/dh/76hostud` != 'on' ]; then
						echo "on" > /system/etc/dh/76hostud
						echo "Host auto-update is turned on!"					
						echo
						echo "Enter to continue..."
						read key
					else
						echo "off" > /system/etc/dh/76hostud
						echo "Host auto-update is turned off!"
						echo
						echo "Enter to continue..."
						read key
					fi
					;;
					
			esac
			;;
		8)	echo "Current Setting"
			echo "======================"
			cat /system/etc/dh/72fast
			echo "======================"
			echo
			echo "1. Enable USB Fast Charging"
			echo "2. Disable USB Fast Charging"
			echo			
			echo -n "Please select an option (Enter to exit): "			
			read fast
			case $fast in
				1)	echo "Fastcharge On" > /system/etc/dh/72fast
					echo "Fastcharging Enabled!  Press enter to exit."
					read key
					;;
				2)	echo "Fastcharge Off" > /system/etc/dh/72fast
					echo "Fastcharging Disabled!  Press enter to exit."
					read key
					;;	
			esac
			;;
			
		*)	exit
			;;
	esac
	
}




#---------------------  mainmenu end  ---------------------------------


while [ 1 ]; do
echo
echo "            _                 ____   ___        "
echo "    __   __(_)_ __   ___ _ __|  _ \ / __\       "
echo "    \ \ / /| | '_ \ / _ \ '__| | \ | |          "
echo "     \ \ / | | |_) |  __/ |  | |_/ | |___       "
echo "      \_/  |_| .__/ \___|_|  |____/ \___/       "
echo "           |_|                                  "
echo "        Performance Controlscript for MIUI      "
echo "       Modified from ViperRom by Digitalhigh    "
echo "================================================"
mountcheck=$(busybox mount | grep /system | cut -d \( -f 2 | cut -d \, -f 1)
case $mountcheck in
	rw)
		echo "System is writable!"
		;;
	*)
		echo "System is NOT writable!"
		echo
		echo "Script must exit!"
		exit
		;;
esac
echo "===================CPU Settings================="
if [ `ps | grep -o virtuous | sed q` = 'virtuous' ]; then
	echo "            Daemon is running!"
	sleepmin=$(cat /system/etc/virtuous_oc/sleep_min_freq)
	sleepmax=$(cat /system/etc/virtuous_oc/sleep_max_freq)
	sleepgov=$(cat /system/etc/virtuous_oc/sleep_governor)
	awakemin=$(cat /system/etc/virtuous_oc/wake_min_freq)
	awakemax=$(cat /system/etc/virtuous_oc/wake_max_freq)
	awakegov=$(cat /system/etc/virtuous_oc/wake_governor)
	echo "            Awake Min Freq: $awakemin"
	echo "            Awake Max Freq: $awakemax"
	echo "            Awake Governor: $awakegov"
	echo 
	echo "            Sleep Min Freq: $sleepmin"
	echo "            Sleep Max Freq: $sleepmax"
	echo "            Sleep Governor: $sleepgov"
else
	echo "            OC Daemon not running!"	
fi
echo "===================I/O Settings================="
echo -n "                Scheduler="
cat /system/etc/dh/74sched
echo -n "              SD Read_Ahead="
cat /system/etc/dh/75sd
echo -n "           Current Dalvik Heap="
getprop dalvik.vm.heapsize
echo "===================Power Saver=================="
echo -n "          Current U/V Setting="
cat /system/etc/dh/73voltage
echo -n "                 "
cat /system/etc/dh/72fast
echo -n "          Cap. Brightness (0-20)="
cat /sys/devices/platform/leds-pm8058/leds/button-backlight/currents
echo -n "             Wifi Scan Interval="
getprop wifi.supplicant_scan_interval
mainmenu
done
